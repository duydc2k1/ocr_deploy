
import streamlit as st
import requests
import json

# --- C·∫•u h√¨nh trang v√† c√°c h·∫±ng s·ªë ---
st.set_page_config(page_title="Smart OCR Chatbot", layout="wide")

GATEWAY_API_URL = "http://103.78.3.50:8888/v1/ocr"

# --- C√°c h√†m x·ª≠ l√Ω logic ---

def call_api(prompt_text):
    """H√†m n√†y x·ª≠ l√Ω vi·ªác hi·ªÉn th·ªã tin nh·∫Øn v√† g·ªçi API."""
    file = st.session_state.get("uploaded_file")
    if not file:
        st.warning("Vui l√≤ng t·∫£i l√™n t√†i li·ªáu tr∆∞·ªõc khi g·ª≠i y√™u c·∫ßu.")
        return

    prompt_to_display = prompt_text if prompt_text else "Tr√≠ch xu·∫•t t·∫•t c·∫£ th√¥ng tin trong t√†i li·ªáu."
    print(prompt_to_display)
    st.session_state.messages.append({"role": "user", "content": prompt_to_display})
    
    st.session_state.messages.append({"role": "assistant", "content": "..."})
    st.session_state.api_call_triggered = True
    st.rerun()

def perform_api_call():
    """H√†m n√†y th·ª±c hi·ªán cu·ªôc g·ªçi API th·ª±c t·∫ø."""
    last_user_message = st.session_state.messages[-2]["content"]
    prompt_for_api = "" if last_user_message == "Tr√≠ch xu·∫•t t·∫•t c·∫£ th√¥ng tin trong t√†i li·ªáu." else last_user_message
    
    file = st.session_state.get("uploaded_file")
    if not file:
        st.session_state.messages[-1] = {"role": "assistant", "content": "L·ªói: Kh√¥ng t√¨m th·∫•y file ƒë·ªÉ g·ª≠i. Vui l√≤ng t·∫£i l·∫°i file."}
        return

    try:
        # G·ª≠i ƒëi m·ªôt file duy nh·∫•t, nh∆∞ng API Gateway v·∫´n nh·∫≠n d∆∞·ªõi d·∫°ng danh s√°ch
        files_to_send = [("files", (file.name, file.getvalue(), file.type))]
        data_payload = {"prompt": prompt_for_api}

        response = requests.post(GATEWAY_API_URL, files=files_to_send, data=data_payload, timeout=300)
        response.raise_for_status()
        response_data = response.json()
        
        if "choices" in response_data and response_data["choices"]:
            bot_response_content = response_data["choices"][0]["message"]["content"]
            st.session_state.messages[-1] = {"role": "assistant", "content": bot_response_content}
        else:
            error_content = f"L·ªói: Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá. {response_data}"
            st.session_state.messages[-1] = {"role": "assistant", "content": error_content}

    except requests.exceptions.RequestException as e:
        error_content = f"L·ªói k·∫øt n·ªëi ƒë·∫øn API Gateway: {e}"
        st.session_state.messages[-1] = {"role": "assistant", "content": error_content}
    
    st.session_state.api_call_triggered = False

def handle_file_upload():
    """Callback ƒë∆∞·ª£c g·ªçi m·ªói khi ng∆∞·ªùi d√πng thay ƒë·ªïi l·ª±a ch·ªçn file."""
    new_file = st.session_state.get("file_uploader_widget")
    
    if new_file:
        st.session_state.uploaded_file = new_file
        # Reset l·∫°i cu·ªôc h·ªôi tho·∫°i ƒë·ªÉ b·∫Øt ƒë·∫ßu v·ªõi ng·ªØ c·∫£nh m·ªõi
        st.session_state.messages = [
            {"role": "assistant", "content": f"ƒê√£ nh·∫≠n file m·ªõi: **{new_file.name}**. B·∫°n mu·ªën tr√≠ch xu·∫•t th√¥ng tin g√¨?"}
        ]
    else:
        # N·∫øu ng∆∞·ªùi d√πng x√≥a file
        if "uploaded_file" in st.session_state:
            del st.session_state["uploaded_file"]
        st.session_state.messages = [
            {"role": "assistant", "content": "Ch√†o b·∫°n! Vui l√≤ng t·∫£i l√™n t√†i li·ªáu v√† ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n."}
        ]


# --- Giao di·ªán ng∆∞·ªùi d√πng ---

st.title("ü§ñ Smart OCR Chatbot")
st.caption("Powered")

# Kh·ªüi t·∫°o session state
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant", "content": "Ch√†o b·∫°n! Vui l√≤ng t·∫£i l√™n t√†i li·ªáu v√† ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ t√¥i c√≥ th·ªÉ gi√∫p b·∫°n."}]
if "api_call_triggered" not in st.session_state:
    st.session_state.api_call_triggered = False
if "uploaded_file" not in st.session_state:
    st.session_state.uploaded_file = None

# Sidebar cho vi·ªác t·∫£i file
with st.sidebar:
    st.header("üìÅ T·∫£i l√™n t√†i li·ªáu")
    st.file_uploader(
        "Ch·ªçn m·ªôt file (·∫¢nh/PDF)",
        type=["png", "jpg", "jpeg", "pdf"],
        accept_multiple_files=False, # **FIX**: Ch·ªâ cho ph√©p 1 file
        key="file_uploader_widget",
        on_change=handle_file_upload
    )
    
    if st.session_state.uploaded_file:
        st.success(f"ƒê√£ ch·ªçn: {st.session_state.uploaded_file.name}")
        if st.button("Tr√≠ch xu·∫•t t·∫•t c·∫£ th√¥ng tin", use_container_width=True):
            call_api("")

# Hi·ªÉn th·ªã c√°c tin nh·∫Øn ƒë√£ c√≥
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        if msg["content"] == "...":
            st.spinner("AI ƒëang ph√¢n t√≠ch...")
        elif isinstance(msg["content"], str) and msg["content"].strip().startswith('{'):
            try:
                st.json(json.loads(msg["content"]))
            except json.JSONDecodeError:
                st.markdown(msg["content"])
        else:
            st.markdown(msg["content"])

# √î chat input cho c√°c c√¢u h·ªèi t√πy ch·ªânh
if user_prompt_input := st.chat_input("Nh·∫≠p c√°c tr∆∞·ªùng c·∫ßn tr√≠ch xu·∫•t..."):
    call_api(user_prompt_input)

# Logic ƒë·ªÉ th·ª±c hi·ªán cu·ªôc g·ªçi API sau khi rerun
if st.session_state.api_call_triggered:
    perform_api_call()
    st.rerun()